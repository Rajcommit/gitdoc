name: Deployment_host
on:
  push:
    branches:
      - main
      - dev
      - master
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: Testing
    runs-on:
      ubuntu-latest

      ##env:
      ## These are enironment variables that is required by the image
      ## All the jobs in the test job will run in defined container , although the container is defined at job level, it can be overridden at step level
      ## The  ubuntu-latest defined on the job level is used to host the image but he container is used to run the steps, the steps will not hold direct acess to the machine and will not have access to the host machine's environment variables direct acess to the tool made avilable by bthat machine

    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb ## same as service label to help container create same environemnt
      MONGODB_CLUSTER_ADDRESS: localhost:27017 ## use localhost for local MongoDB service
      MONGODB_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
      MONGODB_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
      ##MONGODB_CONNECTION_PROTOCOL: mongodb+srv
      ##MONGODB_CLUSTER_ADDRESS: cluster0.igjcfza.mongodb.net
      ##MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      ##MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      PORT: 8080
    services:
      mongodb:
        image: mongo
        ports: ## Expose MongoDB service on port 27017
          - 27017:27017 ### Expose MongoDB service on port 27017
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
